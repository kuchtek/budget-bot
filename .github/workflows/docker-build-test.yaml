---
name: Docker Build and Test
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Version to be manually released'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode - build to be performed, but not to be released'
        default: true
        type: boolean
  workflow_call:
    inputs:
      release_tag:
        description: 'Version to be released'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode - build to be performed, but not to be released'
        default: false
        type: boolean

permissions:
  id-token: write # for OIDC auth
  contents: write # for checkout code & release
  packages: write # to publish a package
  pull-requests: write


jobs:
  check:
    name: Check prerequisites
    runs-on: ubuntu-latest
    outputs:
      has_gh_secrets: ${{ steps.check-gh-key-secret.outputs.declared }}
    steps:
      - name: Check Github Secret availability
        id: check-gh-key-secret
        shell: bash
        run: |
          if [[ ! -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "Token is declared."
          else
            echo "GITHUB_TOKEN secret is missing!"
            exit 1
          fi
          if [[ ! -z "${{ secrets.AIRTABLE_TOKEN }}" ]]; then
            echo "Airtable Token is declared."
          else
            echo "Airtable Token secret is missing!"
            exit 1
          fi
          if [[ ! -z "${{ secrets.TELEGRAM_TOKEN }}" ]]; then
            echo "Telegram Token is declared."
          else
            echo "Telegram Token secret is missing!"
            exit 1
          fi
          if [[ ! -z "${{ secrets.NOTION_TOKEN }}" ]]; then
            echo "Notion Token is declared."
          else
            echo "Notion Token secret is missing!"
            exit 1
          fi
          if [[ ! -z "${{ secrets.AIRTABLE_BASE_ID }}" ]]; then
            echo "Airtable_Base_ID is declared."
            echo "All secrets are declared"
            echo "declared=true" >> $GITHUB_OUTPUT;
          else
            echo "GITHUB_TOKEN secret is missing!"
            exit 1
          fi



      - name: Release Title - ${{ inputs.release_tag }}
        if: (inputs.dry_run == false)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ inputs.release_tag }}"
          append_body: true
          body: |
            ## GitHub Packages
          token: ${{ secrets.GITHUB_TOKEN }}
  
  test:
    name: Python package - perform tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [check]
    if: needs.check.outputs.has_gh_secrets
    env:
      AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      AIRTABLE_TOKEN: ${{ secrets.AIRTABLE_TOKEN }}
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Setup python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 
      
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff --output-format=github .
        continue-on-error: true

      - name: Test with unit test
        run: |
          export AIRTABLE_TOKEN=${{ env.AIRTABLE_TOKEN }}
          export TELEGRAM_TOKEN=${{ env.TELEGRAM_TOKEN }}
          export AIRTABLE_BASE_ID=${{ env.AIRTABLE_BASE_ID }}
          export NOTION_API_TOKEN=${{ env.NOTION_TOKEN}}
          pip install pytest pytest-cov
          pytest test_main.py --doctest-modules --junitxml=./build/test-results/test_main_results.xml
          python -m unittest test_main.py
        
      - name: Publish Test Report
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test-*.xml'

  container:
    name: Gtihub Packages - Container Build & Publish to registry
    runs-on: ubuntu-latest
    needs: [check]
    if: needs.check.outputs.has_gh_secrets
    env:
      REGISTRY: ghcr.io
      REPOSITORY: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.9.0

      # - name: Docker Test
      #   id: docker-test
      #   env: 
      #     DOCKER_BUILDKIT: 1
      #     REGISTRY: ${{ env.REGISTRY}}
      #     REPOSITORY: ${{ github.repository }}
      #     IMAGE_TAG: ${{ github.sha }}-test
      #   run: >
      #     docker buildx build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
      #     --cache-from type=gha --cache-to type=gha,mode=max
      #     --build-arg REPOSITORY_URL="${{ env.REPOSITORY_URL }}"
      #     --build-arg REPOSITORY_AUTH_USER="${{ github.repository_owner }}"
      #     --build-arg REPOSITORY_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
      #     --output type=tar,dest=./out . ;
      #     cat ./out

      - name: Login to container registry
        if: success() && (inputs.dry_run == false)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract metadata for Docker
        id: metadata
        uses: docker/metadata-action@v4
        if: success() && (inputs.dry_run == false)
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha
            type=sha,format=long
            type=semver,pattern={{version}},value=${{ inputs.release_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        if: success() && ( inputs.dry_run == false)
        with:
          context: .
          target: production
          push: true
          builder: ${{ steps.buildx.outpus.name }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          tags: ${{ steps.meta.output.tags }}
          labels: ${{ steps.meta.output.labels }}

      - name: Release Update - ${{ inputs.release_tag }}
        uses: softprops/action-gh-release@v1
        if: success() && ( inputs.dry_run == false )
        env: 
          REGISTRY: ${{ env.REGISTRY }}
          REPOSITORY: ${{ env.REPOSITORY }}
        with:
          tag_name: "v${{ inputs.release_tag }}"
          append_body: true
          body: |
            - Github Packages Container URL: ${{ env.REGISTRY }}/${{ github.repository }}:${{ inputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}